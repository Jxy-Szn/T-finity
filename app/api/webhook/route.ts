import Stripe from \'stripe\';\nimport { NextResponse } from \'next/server\';\nimport { headers } from \'next/headers\';\nimport { sendOrderConfirmationEmail } from \'@/lib/email\'; // Import your email function\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!,\n  {\n    apiVersion: \'2023-10-16\',\n  }\n);\n\nexport async function POST(req: Request) {\n  const body = await req.text();\n  const signature = headers().get(\'Stripe-Signature\') as string;\n\n  let event: Stripe.Event;\n\n  try {\n    event = stripe.webhooks.constructEvent(\n      body,\n      signature,\n      process.env.STRIPE_WEBHOOK_SECRET! // Make sure to set this environment variable\n    );\n  } catch (err: any) {\n    console.error(\'Webhook signature verification failed.\', err.message);\n    return NextResponse.json({ error: `Webhook Error: ${err.message}` }, { status: 400 });\n  }\n\n  // Handle the event\n  switch (event.type) {\n    case \'checkout.session.completed\':\n      const session = event.data.object as Stripe.Checkout.Session;\n\n      // Access metadata\n      const orderId = session.metadata?.orderId;\n      const customerName = session.metadata?.customerName;\n      const customerEmail = session.metadata?.customerEmail;\n      // Parse stored items and shipping details\n      const items = session.metadata?.items ? JSON.parse(session.metadata.items) : [];\n      const shipping = session.metadata?.shipping ? JSON.parse(session.metadata.shipping) : null;\n\n      // Ensure you have the necessary data\n      if (!orderId || !customerName || !customerEmail || items.length === 0 || !shipping) {\n         console.error(\'Missing metadata in checkout session\', session.metadata);\n         return NextResponse.json({ error: \'Missing metadata\' }, { status: 400 });\n      }\n\n      // Payment is successful and the session is complete.\n      // Fulfill the purchase, e.g., update your database, send confirmation email, etc.\n      console.log(\`Payment successful for order \${orderId}\`);\n\n      // You would typically update your order status in your database here\n      // For example: await updateOrder(orderId, { paymentStatus: \'completed\', ... });\n\n      // Send order confirmation email\n       try {\n          const totalAmountInCents = session.amount_total;\n           const total = totalAmountInCents !== null ? totalAmountInCents / 100 : 0; // Convert cents back to dollars\n\n           // Calculate order date and estimated delivery (you might need a helper function for this)\n           // For now, using a placeholder or simple date. If you removed getEstimatedDeliveryDate, \n           // you might need to recreate a similar function or handle this differently.\n           const orderDate = new Date().toLocaleDateString(\"en-US\", { \n              weekday: \"long\", year: \"numeric\", month: \"long\", day: \"numeric\" \n           });\n           // You might need to store shipping method in metadata to calculate estimated delivery accurately here\n           const estimatedDelivery = \'Estimated delivery details here\'; // Placeholder\n\n          await sendOrderConfirmationEmail({\n             email: customerEmail,\n             name: customerName,\n             orderId,\n             items,\n             total,\n             shipping,\n             orderDate,\n             estimatedDelivery, // Use actual calculated value if possible\n           });\n           console.log(\`Order confirmation email sent to \${customerEmail}\`);\n       } catch (emailError) {\n           console.error(\'Error sending order confirmation email:\', emailError);\n           // Consider logging this error and potentially retrying the email later\n       }\n\n      break;\n    // Handle other event types as needed\n    case \'payment_intent.succeeded\':\n      // This is another way to confirm payment success, depending on your flow\n      const paymentIntent = event.data.object as Stripe.PaymentIntent;\n      console.log(\'PaymentIntent was successful!\', paymentIntent.id);\n      // If you are handling fulfillment here instead of checkout.session.completed\n      // you would implement your order fulfillment logic here.\n      break;\n    case \'payment_intent.payment_failed\':\n        const failedPaymentIntent = event.data.object as Stripe.PaymentIntent;\n        console.log(\'PaymentIntent failed:\', failedPaymentIntent.last_payment_error);\n        // Handle failed payments (e.g., notify user)\n        break;\n    // ... handle other event types\n    default:\n      console.log(`Unhandled event type ${event.type}`);\n  }\n\n  // Return a 200 response to acknowledge receipt of the event\n  return NextResponse.json({ received: true });\n}\n 